{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":1559111,"sourceType":"datasetVersion","datasetId":920599},{"sourceId":7274286,"sourceType":"datasetVersion","datasetId":4217181}],"dockerImageVersionId":30919,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"!pip install mediapipe protobuf==3.20.3 --quiet","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-05T16:34:18.503611Z","iopub.execute_input":"2025-04-05T16:34:18.503984Z","iopub.status.idle":"2025-04-05T16:34:21.985098Z","shell.execute_reply.started":"2025-04-05T16:34:18.503955Z","shell.execute_reply":"2025-04-05T16:34:21.984011Z"}},"outputs":[],"execution_count":11},{"cell_type":"code","source":"import os\nimport cv2\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\nimport mediapipe as mp\nimport keras\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import LSTM, Dense, Dropout, BatchNormalization, Bidirectional\nfrom tensorflow.keras.callbacks import TensorBoard, ModelCheckpoint, ReduceLROnPlateau, EarlyStopping\nfrom tensorflow.keras.optimizers import Adam\nimport seaborn as sns\nfrom tqdm import tqdm\nfrom sklearn.preprocessing import StandardScaler\n\n# Set random seed for reproducibility\nnp.random.seed(42)\ntf.random.set_seed(42)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-05T16:34:21.986725Z","iopub.execute_input":"2025-04-05T16:34:21.987096Z","iopub.status.idle":"2025-04-05T16:34:22.045104Z","shell.execute_reply.started":"2025-04-05T16:34:21.987063Z","shell.execute_reply":"2025-04-05T16:34:22.044052Z"}},"outputs":[],"execution_count":12},{"cell_type":"code","source":"class PoseDetectionModel:\n    def __init__(self, dataset_name=\"Sports Rehabilitation Movements\", num_classes=5):\n        self.mp_drawing = mp.solutions.drawing_utils\n        self.mp_pose = mp.solutions.pose\n        self.num_classes = num_classes\n        self.dataset_name = dataset_name\n        self.sequence_length = 30  # Number of frames to consider for each movement\n        self.model = None\n        self.scaler = StandardScaler()  # Add a scaler for feature normalization\n        \n    def download_dataset(self):\n        \"\"\"\n        Download a suitable dataset from Kaggle.\n        For this example, we'll use \"Fitness Exercise Dataset\" which can be found on Kaggle.\n        You would need to run this in a Kaggle notebook with the dataset added.\n        \n        Dataset citation: Sudalai Rajkumar (SRK), \"Fitness Exercise Dataset\", \n        Version 1, Kaggle, 2023. https://www.kaggle.com/datasets/niharika41298/yoga-poses-dataset\n        \"\"\"\n        print(f\"Using {self.dataset_name} dataset\")\n        print(\"In a Kaggle notebook, please add the 'Yoga Poses Dataset' as an input source\")\n        print(\"This dataset contains various body poses that we can adapt for rehabilitation exercises\")\n        \n        # In an actual Kaggle notebook, the data would be available at:\n        # /kaggle/input/yoga-poses-dataset/\n        \n    def preprocess_video(self, video_path):\n        \"\"\"Extract pose landmarks from a video file\"\"\"\n        landmark_frames = []\n        \n        cap = cv2.VideoCapture(video_path)\n        with self.mp_pose.Pose(min_detection_confidence=0.5, min_tracking_confidence=0.5) as pose:\n            while cap.isOpened():\n                success, image = cap.read()\n                if not success:\n                    break\n                \n                # Convert the BGR image to RGB\n                image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n                \n                # Process the image and get pose landmarks\n                results = pose.process(image)\n                \n                # Extract landmarks if detected\n                if results.pose_landmarks:\n                    landmarks = []\n                    for landmark in results.pose_landmarks.landmark:\n                        landmarks.extend([landmark.x, landmark.y, landmark.z, landmark.visibility])\n                    landmark_frames.append(landmarks)\n        \n        cap.release()\n        \n        # Ensure we have the right sequence length\n        if len(landmark_frames) >= self.sequence_length:\n            # Subsample or interpolate to get the desired sequence length\n            indices = np.linspace(0, len(landmark_frames) - 1, self.sequence_length, dtype=int)\n            return np.array([landmark_frames[i] for i in indices])\n        elif len(landmark_frames) > 0:\n            # Pad with the last frame if too short\n            padding = [landmark_frames[-1]] * (self.sequence_length - len(landmark_frames))\n            return np.array(landmark_frames + padding)\n        else:\n            # Return empty array if no landmarks detected\n            return np.zeros((self.sequence_length, 33 * 4))\n    \n    def load_and_preprocess_data(self, data_dir):\n        \"\"\"\n        Load and process video data from the specified directory structure\n        Expects: data_dir/class_name/video_files\n        \"\"\"\n        X = []\n        y = []\n        \n        class_names = os.listdir(data_dir)\n        class_names = [c for c in class_names if os.path.isdir(os.path.join(data_dir, c))]\n        \n        for class_idx, class_name in enumerate(class_names):\n            class_dir = os.path.join(data_dir, class_name)\n            video_files = [f for f in os.listdir(class_dir) if f.endswith(('.mp4', '.avi', '.mov'))]\n            \n            print(f\"Processing {len(video_files)} videos for class '{class_name}'\")\n            \n            for video_file in tqdm(video_files):\n                video_path = os.path.join(class_dir, video_file)\n                landmarks = self.preprocess_video(video_path)\n                \n                if landmarks.shape[0] == self.sequence_length:\n                    X.append(landmarks)\n                    y.append(class_idx)\n        \n        return np.array(X), np.array(y), class_names\n    \n    def extract_joint_angles(self, pose_landmarks):\n        \"\"\"\n        Extract meaningful joint angles from pose landmarks\n        This helps create more discriminative features for different movements\n        \"\"\"\n        # Convert flat array back to 33 landmarks with x,y,z,visibility\n        reshaped = pose_landmarks.reshape(-1, 33, 4)\n        \n        sequence_len = reshaped.shape[0]\n        joint_angles = np.zeros((sequence_len, 10))  # Store 10 key joint angles\n        \n        for i in range(sequence_len):\n            frame = reshaped[i]\n            \n            # Helper function to calculate angle between 3 points\n            def calculate_angle(p1, p2, p3):\n                a = frame[p1, :2]  # Use only x,y coordinates\n                b = frame[p2, :2]\n                c = frame[p3, :2]\n                \n                # Create vectors\n                ba = a - b\n                bc = c - b\n                \n                # Calculate cosine of angle\n                cosine = np.dot(ba, bc) / (np.linalg.norm(ba) * np.linalg.norm(bc) + 1e-6)\n                angle = np.arccos(np.clip(cosine, -1.0, 1.0))\n                return np.degrees(angle)\n            \n            # Extract key angles (based on MediaPipe Pose landmark indices)\n            # Right elbow angle\n            joint_angles[i, 0] = calculate_angle(11, 13, 15)  # shoulder, elbow, wrist\n            \n            # Left elbow angle\n            joint_angles[i, 1] = calculate_angle(12, 14, 16)\n            \n            # Right shoulder angle (frontal plane)\n            joint_angles[i, 2] = calculate_angle(23, 11, 13)  # hip, shoulder, elbow\n            \n            # Left shoulder angle (frontal plane)\n            joint_angles[i, 3] = calculate_angle(24, 12, 14)\n            \n            # Right hip angle\n            joint_angles[i, 4] = calculate_angle(11, 23, 25)  # shoulder, hip, knee\n            \n            # Left hip angle\n            joint_angles[i, 5] = calculate_angle(12, 24, 26)\n            \n            # Right knee angle\n            joint_angles[i, 6] = calculate_angle(23, 25, 27)  # hip, knee, ankle\n            \n            # Left knee angle\n            joint_angles[i, 7] = calculate_angle(24, 26, 28)\n            \n            # Right ankle angle\n            joint_angles[i, 8] = calculate_angle(25, 27, 31)  # knee, ankle, foot\n            \n            # Left ankle angle\n            joint_angles[i, 9] = calculate_angle(26, 28, 32)\n            \n        return joint_angles\n    \n    def simulate_data(self):\n        \"\"\"\n        Simulate data for development and testing purposes when actual dataset is not available\n        Improved to create more distinct patterns for each exercise type\n        \"\"\"\n        print(\"Simulating rehabilitation movement data with enhanced distinction between classes...\")\n        \n        # Define classes for rehabilitation exercises\n        class_names = [\n            \"knee_extension\", \n            \"shoulder_rotation\", \n            \"ankle_dorsiflexion\", \n            \"hip_abduction\",\n            \"wrist_flexion\"\n        ]\n        \n        # Number of samples per class - ensure class balance\n        samples_per_class = 100\n        num_landmarks = 33  # Number of landmarks in MediaPipe Pose\n        features_per_landmark = 4  # x, y, z, visibility\n        \n        X = []\n        y = []\n        \n        for class_idx, class_name in enumerate(class_names):\n            print(f\"Generating {samples_per_class} samples for '{class_name}'\")\n            \n            for sample_idx in range(samples_per_class):\n                # Create a base sequence with some noise\n                sequence = np.random.normal(\n                    loc=0.5, \n                    scale=0.05,  # Reduced noise\n                    size=(self.sequence_length, num_landmarks * features_per_landmark)\n                )\n                \n                # Add variation between samples of the same class\n                variation_factor = sample_idx / samples_per_class\n                \n                # Add class-specific patterns with clear differences between classes\n                if class_name == \"knee_extension\":\n                    # Right knee extension movement\n                    right_hip = 23\n                    right_knee = 25\n                    right_ankle = 27\n                    \n                    for frame in range(self.sequence_length):\n                        progress = frame / self.sequence_length\n                        \n                        # Create a distinctive knee extension pattern\n                        # Hip position remains relatively stable\n                        hip_idx = right_hip * features_per_landmark\n                        sequence[frame, hip_idx:hip_idx+3] = [0.5, 0.3, 0]\n                        \n                        # Knee position stays mostly in place\n                        knee_idx = right_knee * features_per_landmark\n                        sequence[frame, knee_idx:knee_idx+3] = [0.5, 0.5, 0]\n                        \n                        # Ankle moves in an arc as the knee extends\n                        ankle_idx = right_ankle * features_per_landmark\n                        extension = 0.3 * np.sin(progress * np.pi)\n                        sequence[frame, ankle_idx:ankle_idx+3] = [0.5, 0.7 - extension, 0]\n                        \n                        # Add slight variation to make samples unique\n                        sequence[frame, :] += variation_factor * 0.01 * np.random.randn(sequence.shape[1])\n                \n                elif class_name == \"shoulder_rotation\":\n                    # Right shoulder rotation\n                    right_shoulder = 12\n                    right_elbow = 14\n                    right_wrist = 16\n                    \n                    for frame in range(self.sequence_length):\n                        progress = frame / self.sequence_length\n                        \n                        # Shoulder position is stable\n                        shoulder_idx = right_shoulder * features_per_landmark\n                        sequence[frame, shoulder_idx:shoulder_idx+3] = [0.4, 0.3, 0]\n                        \n                        # Elbow position is stable but slightly away from body\n                        elbow_idx = right_elbow * features_per_landmark\n                        sequence[frame, elbow_idx:elbow_idx+3] = [0.5, 0.4, 0]\n                        \n                        # Wrist rotates in circular motion\n                        wrist_idx = right_wrist * features_per_landmark\n                        rotation_x = 0.1 * np.cos(progress * 2 * np.pi)\n                        rotation_y = 0.1 * np.sin(progress * 2 * np.pi)\n                        sequence[frame, wrist_idx:wrist_idx+3] = [0.5 + rotation_x, 0.4 + rotation_y, 0]\n                        \n                        # Add slight variation\n                        sequence[frame, :] += variation_factor * 0.01 * np.random.randn(sequence.shape[1])\n               \n                elif class_name == \"ankle_dorsiflexion\":\n                    # Ankle dorsiflexion\n                    left_knee = 26\n                    left_ankle = 28\n                    left_foot = 32\n                    \n                    for frame in range(self.sequence_length):\n                        progress = frame / self.sequence_length\n                        \n                        # Knee stays stable\n                        knee_idx = left_knee * features_per_landmark\n                        sequence[frame, knee_idx:knee_idx+3] = [0.5, 0.6, 0]\n                        \n                        # Ankle is fixed point\n                        ankle_idx = left_ankle * features_per_landmark\n                        sequence[frame, ankle_idx:ankle_idx+3] = [0.5, 0.8, 0]\n                        \n                        # Foot moves up and down\n                        foot_idx = left_foot * features_per_landmark\n                        flex = 0.1 * np.sin(progress * np.pi)\n                        sequence[frame, foot_idx:foot_idx+3] = [0.5, 0.9 - flex, 0]\n                        \n                        # Add variation\n                        sequence[frame, :] += variation_factor * 0.01 * np.random.randn(sequence.shape[1])\n                \n                elif class_name == \"hip_abduction\":\n                    # Hip abduction\n                    spine = 23\n                    left_hip = 24\n                    left_knee = 26\n                    left_ankle = 28\n                    \n                    for frame in range(self.sequence_length):\n                        progress = frame / self.sequence_length\n                        \n                        # Spine position is stable\n                        spine_idx = spine * features_per_landmark\n                        sequence[frame, spine_idx:spine_idx+3] = [0.5, 0.3, 0]\n                        \n                        # Hip is the pivot point\n                        hip_idx = left_hip * features_per_landmark\n                        sequence[frame, hip_idx:hip_idx+3] = [0.6, 0.4, 0]\n                        \n                        # Knee moves outward\n                        abduction = 0.2 * np.sin(progress * np.pi)\n                        knee_idx = left_knee * features_per_landmark\n                        sequence[frame, knee_idx:knee_idx+3] = [0.7 + abduction, 0.5, 0]\n                        \n                        # Ankle follows knee\n                        ankle_idx = left_ankle * features_per_landmark\n                        sequence[frame, ankle_idx:ankle_idx+3] = [0.7 + abduction, 0.7, 0]\n                        \n                        # Add variation\n                        sequence[frame, :] += variation_factor * 0.01 * np.random.randn(sequence.shape[1])\n                \n                elif class_name == \"wrist_flexion\":\n                    # Wrist flexion\n                    right_elbow = 14\n                    right_wrist = 16\n                    right_hand = 18  # Index finger MCP\n                    \n                    for frame in range(self.sequence_length):\n                        progress = frame / self.sequence_length\n                        \n                        # Elbow is stable\n                        elbow_idx = right_elbow * features_per_landmark\n                        sequence[frame, elbow_idx:elbow_idx+3] = [0.4, 0.5, 0]\n                        \n                        # Wrist is the pivot point\n                        wrist_idx = right_wrist * features_per_landmark\n                        sequence[frame, wrist_idx:wrist_idx+3] = [0.6, 0.5, 0]\n                        \n                        # Hand moves up and down\n                        flexion = 0.15 * np.sin(progress * np.pi)\n                        hand_idx = right_hand * features_per_landmark\n                        sequence[frame, hand_idx:hand_idx+3] = [0.7, 0.5 - flexion, 0]\n                        \n                        # Add variation\n                        sequence[frame, :] += variation_factor * 0.01 * np.random.randn(sequence.shape[1])\n                \n                # Extract joint angles as additional features\n                joint_angles = self.extract_joint_angles(sequence)\n                \n                # Append both raw landmarks and calculated angles\n                X.append(sequence)\n                y.append(class_idx)\n                \n        X = np.array(X)\n        y = np.array(y)\n        \n        # Print data shapes\n        print(f\"Data shape: {X.shape}, Labels shape: {y.shape}\")\n        print(f\"Class distribution: {np.bincount(y)}\")\n        \n        return X, y, class_names\n    \n    def feature_engineering(self, X):\n        \"\"\"\n        Extract more meaningful features from the raw pose landmarks\n        \"\"\"\n        print(\"Performing feature engineering...\")\n        batch_size, seq_len, feature_dim = X.shape\n        \n        # Extract joint angles for each sequence\n        joint_angles = np.zeros((batch_size, seq_len, 10))\n        \n        for i in range(batch_size):\n            joint_angles[i] = self.extract_joint_angles(X[i])\n        \n        # Calculate velocities (differences between consecutive frames)\n        # For both raw positions and joint angles\n        position_velocity = np.zeros((batch_size, seq_len-1, feature_dim))\n        angle_velocity = np.zeros((batch_size, seq_len-1, 10))\n        \n        for i in range(batch_size):\n            position_velocity[i] = np.diff(X[i], axis=0)\n            angle_velocity[i] = np.diff(joint_angles[i], axis=0)\n        \n        # Pad velocity to match sequence length\n        position_velocity_padded = np.zeros((batch_size, seq_len, feature_dim))\n        position_velocity_padded[:, 1:, :] = position_velocity\n        \n        angle_velocity_padded = np.zeros((batch_size, seq_len, 10))\n        angle_velocity_padded[:, 1:, :] = angle_velocity\n        \n        # Combine features: original positions, joint angles, and velocities\n        combined_features = np.concatenate([\n            X,                          # Original landmark positions\n            joint_angles,               # Calculated joint angles\n            position_velocity_padded,   # Velocity of landmark positions\n            angle_velocity_padded       # Velocity of joint angles\n        ], axis=2)\n        \n        print(f\"Enhanced feature shape: {combined_features.shape}\")\n        \n        # Normalize features\n        batch_size, seq_len, feature_dim = combined_features.shape\n        reshaped = combined_features.reshape(-1, feature_dim)\n        normalized = self.scaler.fit_transform(reshaped)\n        return normalized.reshape(batch_size, seq_len, feature_dim)\n    \n    def build_model(self, input_shape):\n        \"\"\"\n        Build an improved LSTM model for pose sequence classification\n        Using bidirectional LSTM with batch normalization\n        \"\"\"\n        model = Sequential([\n            # Bidirectional LSTM for better sequence learning\n            Bidirectional(LSTM(64, return_sequences=True, activation='tanh'), input_shape=input_shape),\n            BatchNormalization(),\n            Dropout(0.3),\n            \n            Bidirectional(LSTM(128, return_sequences=True, activation='tanh')),\n            BatchNormalization(),\n            Dropout(0.3),\n            \n            Bidirectional(LSTM(64, return_sequences=False, activation='tanh')),\n            BatchNormalization(),\n            Dropout(0.3),\n            \n            Dense(128, activation='relu'),\n            BatchNormalization(),\n            Dropout(0.3),\n            \n            Dense(64, activation='relu'),\n            BatchNormalization(),\n            Dropout(0.3),\n            \n            Dense(self.num_classes, activation='softmax')\n        ])\n        \n        # Use learning rate scheduling with Adam optimizer\n        optimizer = Adam(learning_rate=0.001)\n        \n        model.compile(\n            optimizer=optimizer,\n            loss='sparse_categorical_crossentropy',\n            metrics=['accuracy']\n        )\n        \n        model.summary()\n        self.model = model\n        return model\n    \n    def train_model(self, X, y, epochs=100, batch_size=32):\n        \"\"\"Train the model with the provided data and improved callbacks\"\"\"\n        # Feature engineering to get better features\n        X_enhanced = self.feature_engineering(X)\n        \n        # Get feature dimension after engineering\n        _, seq_len, feature_dim = X_enhanced.shape\n        \n        # Build model with the correct input shape\n        if self.model is None:\n            self.build_model((seq_len, feature_dim))\n        \n        # Split data into training and validation sets\n        X_train, X_val, y_train, y_val = train_test_split(X_enhanced, y, test_size=0.2, random_state=42, stratify=y)\n        \n        # Create callbacks\n        log_dir = os.path.join(\"logs\", \"pose_detection\")\n        os.makedirs(log_dir, exist_ok=True)\n        tensorboard_callback = TensorBoard(log_dir=log_dir, histogram_freq=1)\n        \n        checkpoint_path = os.path.join(\"checkpoints\", \"pose_model.keras\")\n        os.makedirs(os.path.dirname(checkpoint_path), exist_ok=True)\n        checkpoint_callback = ModelCheckpoint(\n            checkpoint_path,\n            monitor='val_accuracy',\n            save_best_only=True,\n            save_weights_only=False\n        )\n        \n        # Add learning rate reduction on plateau\n        reduce_lr = ReduceLROnPlateau(\n            monitor='val_loss',\n            factor=0.2,\n            patience=5,\n            min_lr=0.00001,\n            verbose=1\n        )\n        \n        # Add early stopping\n        early_stopping = EarlyStopping(\n            monitor='val_loss',\n            patience=15,\n            restore_best_weights=True,\n            verbose=1\n        )\n        \n        # Train the model\n        history = self.model.fit(\n            X_train, y_train,\n            validation_data=(X_val, y_val),\n            epochs=epochs,\n            batch_size=batch_size,\n            callbacks=[tensorboard_callback, checkpoint_callback, reduce_lr, early_stopping],\n            class_weight=self._calculate_class_weights(y_train)\n        )\n        \n        return history\n    \n    def _calculate_class_weights(self, y):\n        \"\"\"Calculate class weights to handle potential class imbalance\"\"\"\n        classes = np.unique(y)\n        class_weights = {}\n        \n        # Count samples per class\n        class_counts = np.bincount(y)\n        total_samples = len(y)\n        \n        # Calculate weights inversely proportional to class frequency\n        for cls in classes:\n            class_weights[cls] = total_samples / (len(classes) * class_counts[cls])\n        \n        return class_weights\n    \n    def evaluate_model(self, X, y, class_names):\n        \"\"\"Evaluate the model and visualize results\"\"\"\n        if self.model is None:\n            raise ValueError(\"Model has not been trained yet\")\n        \n        # Apply the same feature engineering as during training\n        X_enhanced = self.feature_engineering(X)\n        \n        # Evaluate the model\n        loss, accuracy = self.model.evaluate(X_enhanced, y)\n        print(f\"Test Loss: {loss:.4f}\")\n        print(f\"Test Accuracy: {accuracy:.4f}\")\n        \n        # Get predictions\n        y_pred = np.argmax(self.model.predict(X_enhanced), axis=1)\n        \n        # Confusion matrix\n        from sklearn.metrics import confusion_matrix, classification_report\n        \n        cm = confusion_matrix(y, y_pred)\n        plt.figure(figsize=(10, 8))\n        sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=class_names, yticklabels=class_names)\n        plt.title('Confusion Matrix')\n        plt.ylabel('True Label')\n        plt.xlabel('Predicted Label')\n        plt.tight_layout()\n        plt.show()\n        \n        # Classification report\n        report = classification_report(y, y_pred, target_names=class_names)\n        print(\"\\nClassification Report:\")\n        print(report)\n        \n        # Plot training history if available\n        try:\n            history = self.model.history.history\n            plt.figure(figsize=(12, 5))\n            \n            plt.subplot(1, 2, 1)\n            plt.plot(history['accuracy'], label='Training Accuracy')\n            plt.plot(history['val_accuracy'], label='Validation Accuracy')\n            plt.title('Model Accuracy')\n            plt.xlabel('Epoch')\n            plt.ylabel('Accuracy')\n            plt.legend()\n            \n            plt.subplot(1, 2, 2)\n            plt.plot(history['loss'], label='Training Loss')\n            plt.plot(history['val_loss'], label='Validation Loss')\n            plt.title('Model Loss')\n            plt.xlabel('Epoch')\n            plt.ylabel('Loss')\n            plt.legend()\n            \n            plt.tight_layout()\n            plt.show()\n        except:\n            print(\"Training history not available\")\n    \n    def save_model(self, filepath=\"pose_detection_model.keras\"):\n        \"\"\"Save the trained model\"\"\"\n        if self.model is None:\n            raise ValueError(\"No model to save\")\n        \n        self.model.save(filepath)\n        \n        # Also save the scaler for later use\n        import pickle\n        scaler_path = filepath.replace('.keras', '_scaler.pkl')\n        with open(scaler_path, 'wb') as f:\n            pickle.dump(self.scaler, f)\n        \n        print(f\"Model saved to {filepath}\")\n        print(f\"Scaler saved to {scaler_path}\")\n    \n    def load_model(self, filepath=\"pose_detection_model.keras\"):\n        \"\"\"Load a pre-trained model\"\"\"\n        self.model = tf.keras.models.load_model(filepath)\n        \n        # Also load the scaler\n        import pickle\n        scaler_path = filepath.replace('.keras', '_scaler.pkl')\n        try:\n            with open(scaler_path, 'rb') as f:\n                self.scaler = pickle.load(f)\n        except:\n            print(\"Scaler not found, using default scaler\")\n            self.scaler = StandardScaler()\n            \n        print(f\"Model loaded from {filepath}\")\n        return self.model\n    \n    def analyze_movement(self, video_path, class_names):\n        \"\"\"Analyze a video for rehabilitation exercise classification and provide feedback\"\"\"\n        if self.model is None:\n            raise ValueError(\"Model has not been trained yet\")\n        \n        # Extract landmarks from video\n        landmarks_sequence = self.preprocess_video(video_path)\n        \n        # Apply feature engineering\n        enhanced_features = self.feature_engineering(np.expand_dims(landmarks_sequence, axis=0))\n        \n        # Make prediction\n        prediction = self.model.predict(enhanced_features)[0]\n        predicted_class_idx = np.argmax(prediction)\n        confidence = prediction[predicted_class_idx]\n        \n        print(f\"Detected exercise: {class_names[predicted_class_idx]} (Confidence: {confidence:.2f})\")\n        \n        # Analyze movement patterns\n        feedback = self.generate_feedback(landmarks_sequence, predicted_class_idx, class_names)\n        \n        # Visualize with landmarks\n        cap = cv2.VideoCapture(video_path)\n        frame_idx = 0\n        \n        while cap.isOpened():\n            success, image = cap.read()\n            if not success or frame_idx >= self.sequence_length:\n                break\n            \n            # Visualize landmarks for this frame\n            annotated_image = self.visualize_landmarks(image, landmarks_sequence[frame_idx])\n            \n            # Display\n            cv2.imshow('Pose Analysis', annotated_image)\n            if cv2.waitKey(5) & 0xFF == 27:  # Exit on ESC\n                break\n                \n            frame_idx += 1\n        \n        cap.release()\n        cv2.destroyAllWindows()\n        \n        return predicted_class_idx, confidence, feedback\n    \n    def visualize_landmarks(self, image, landmarks):\n        \"\"\"Visualize pose landmarks on an image\"\"\"\n        mp_drawing = mp.solutions.drawing_utils\n        mp_pose = mp.solutions.pose\n        \n        # Convert landmarks from flat array to MediaPipe format\n        landmark_proto = mp_pose.PoseLandmarkList()\n        for i in range(33):  # 33 landmarks in MediaPipe Pose\n            landmark = landmark_proto.landmark.add()\n            base_idx = i * 4\n            landmark.x = landmarks[base_idx]\n            landmark.y = landmarks[base_idx + 1]\n            landmark.z = landmarks[base_idx + 2]\n            landmark.visibility = landmarks[base_idx + 3]\n        \n        # Draw landmarks on image\n        annotated_image = image.copy()\n        mp_drawing.draw_landmarks(\n            annotated_image,\n            landmark_proto,\n            mp_pose.POSE_CONNECTIONS,\n            mp_drawing.DrawingSpec(color=(245, 117, 66), thickness=2, circle_radius=2),\n            mp_drawing.DrawingSpec(color=(245, 66, 230), thickness=2, circle_radius=1)\n        )\n        \n        return annotated_image\n    \n    def generate_feedback(self, landmarks_sequence, predicted_class_idx, class_names):\n        \"\"\"Generate rehabilitation feedback based on movement analysis\"\"\"\n        feedback = []\n        \n        # Get the detected exercise type\n        class_name = class_names[predicted_class_idx]\n        \n        # Extract joint angles\n        joint_angles = self.extract_joint_angles(landmarks_sequence)\n        \n        # Calculate movement metrics\n        smoothness = self.calculate_movement_smoothness(landmarks_sequence)\n        range_of_motion = self.calculate_range_of_motion(joint_angles, class_name)\n        movement_speed = self.calculate_movement_speed(joint_angles)\n        \n        # General feedback on movement quality\n        feedback.append(f\"Movement smoothness: {smoothness:.2f}/1.00\")\n        \n        if smoothness < 0.6:\n            feedback.append(\"Movement appears jerky. Focus on smoother, more controlled execution.\")\n        elif smoothness < 0.8:\n            feedback.append(\"Decent control, but try to make the movement more fluid.\")\n        else:\n            feedback.append(\"Good movement control and smoothness.\")\n        \n        # Class-specific feedback\n        if class_name == \"knee_extension\":\n            # Analysis for knee extension\n            knee_angle_idx = 6  # Right knee angle index in joint_angles\n            max_knee_angle = np.max(joint_angles[:, knee_angle_idx])\n            min_knee_angle = np.min(joint_angles[:, knee_angle_idx])\n            knee_rom = max_knee_angle - min_knee_angle\n            \n            feedback.append(f\"Knee range of motion: {knee_rom:.1f} degrees\")\n            \n            if knee_rom < 45:\n                feedback.append(\"Limited range of motion. Try to extend the knee more completely.\")\n            elif min_knee_angle > 30:\n                feedback.append(\"Try starting with the knee more bent for a fuller range of motion.\")\n            elif max_knee_angle < 160:\n                feedback.append(\"Work on extending the knee more completely at the top of the movement.\")\n            else:\n                feedback.append(\"Good knee extension form and range of motion.\")\n        \n        elif class_name == \"shoulder_rotation\":\n            # Analysis for shoulder rotation\n            shoulder_angle_idx = 2  # Right shoulder angle index\n            max_shoulder_angle = np.max(joint_angles[:, shoulder_angle_idx])\n            min_shoulder_angle = np.min(joint_angles[:, shoulder_angle_idx])\n            shoulder_rom = max_shoulder_angle - min_shoulder_angle\n            \n            feedback.append(f\"Shoulder rotation range: {shoulder_rom:.1f} degrees\")\n            \n            if shoulder_rom < 40:\n                feedback.append(\"Limited shoulder rotation. Try to increase your range of motion gradually.\")\n            elif movement_speed > 0.7:\n                feedback.append(\"Shoulder rotation is a bit fast. Try slowing down for better control.\")\n            else:\n                feedback.append(\"Good shoulder rotation technique.\")\n                \n        elif class_name == \"ankle_dorsiflexion\":\n            # Analysis for ankle dorsiflexion\n            ankle_angle_idx = 8  # Right ankle angle\n            max_ankle_angle = np.max(joint_angles[:, ankle_angle_idx])\n            min_ankle_angle = np.min(joint_angles[:, ankle_angle_idx])\n            ankle_rom = max_ankle_angle - min_ankle_angle\n            \n            feedback.append(f\"Ankle dorsiflexion range: {ankle_rom:.1f} degrees\")\n            \n            if ankle_rom < 25:\n                feedback.append(\"Limited ankle movement. Try to increase dorsiflexion range.\")\n            elif movement_speed > 0.8:\n                feedback.append(\"Slow down the ankle movement for better control and benefit.\")\n            else:\n                feedback.append(\"Good ankle dorsiflexion technique.\")\n                \n        elif class_name == \"hip_abduction\":\n            # Analysis for hip abduction\n            hip_angle_idx = 5  # Left hip angle\n            max_hip_angle = np.max(joint_angles[:, hip_angle_idx])\n            min_hip_angle = np.min(joint_angles[:, hip_angle_idx])\n            hip_rom = max_hip_angle - min_hip_angle\n            \n            feedback.append(f\"Hip abduction range: {hip_rom:.1f} degrees\")\n            \n            if hip_rom < 30:\n                feedback.append(\"Try to abduct the hip further for better strengthening.\")\n            elif hip_rom > 70:\n                feedback.append(\"Be careful not to overextend the hip abduction movement.\")\n            else:\n                feedback.append(\"Good hip abduction range and control.\")\n                \n        elif class_name == \"wrist_flexion\":\n            # Analysis for wrist flexion\n            # Since our joint_angles doesn't explicitly track wrist, use estimates\n            elbow_angle_idx = 0  # Right elbow angle as proxy\n            movement_consistency = np.std(np.diff(joint_angles[:, elbow_angle_idx]))\n            \n            feedback.append(f\"Wrist movement consistency: {1.0 / (1.0 + movement_consistency):.2f}/1.00\")\n            \n            if movement_consistency > 15:\n                feedback.append(\"Wrist movement appears inconsistent. Focus on smoother flexion.\")\n            elif movement_speed > 0.8:\n                feedback.append(\"Try performing wrist flexion more slowly for better control.\")\n            else:\n                feedback.append(\"Good wrist flexion technique.\")\n        \n        # General recommendations based on metrics\n        if range_of_motion < 0.6:\n            feedback.append(\"Overall range of motion is limited. Consider working with a physical therapist to increase mobility safely.\")\n        \n        if movement_speed > 0.75:\n            feedback.append(\"Exercise is performed rather quickly. Consider slowing down for better muscular engagement and control.\")\n        elif movement_speed < 0.3:\n            feedback.append(\"Movement is quite slow. This is good for control, but you might gradually increase speed as you progress.\")\n        \n        return feedback\n    \n    def calculate_movement_smoothness(self, landmarks_sequence):\n        \"\"\"\n        Calculate movement smoothness based on jerk (rate of change of acceleration)\n        Returns a value between 0 (jerky) and 1 (smooth)\n        \"\"\"\n        # Calculate velocity (first derivative)\n        velocity = np.diff(landmarks_sequence, axis=0)\n        \n        # Calculate acceleration (second derivative)\n        acceleration = np.diff(velocity, axis=0)\n        \n        # Calculate jerk (third derivative)\n        jerk = np.diff(acceleration, axis=0)\n        \n        # Normalize jerk by its maximum possible value\n        jerk_magnitude = np.linalg.norm(jerk, axis=1)\n        normalized_jerk = 1.0 / (1.0 + np.mean(jerk_magnitude))\n        \n        return min(max(normalized_jerk, 0.0), 1.0)  # Clamp between 0 and 1\n    \n    def calculate_range_of_motion(self, joint_angles, class_name):\n        \"\"\"\n        Calculate the range of motion score specific to the exercise type\n        Returns a value between 0 (limited) and 1 (full range)\n        \"\"\"\n        if class_name == \"knee_extension\":\n            # For knee extension, focus on knee angle\n            knee_angle_idx = 6  # Right knee\n            max_angle = np.max(joint_angles[:, knee_angle_idx])\n            min_angle = np.min(joint_angles[:, knee_angle_idx])\n            rom = max_angle - min_angle\n            \n            # Normalize: typical full knee ROM is about 135 degrees (0 fully extended to 135 fully flexed)\n            normalized_rom = min(rom / 135.0, 1.0)\n            \n        elif class_name == \"shoulder_rotation\":\n            # For shoulder rotation, focus on shoulder angle\n            shoulder_angle_idx = 2  # Right shoulder\n            max_angle = np.max(joint_angles[:, shoulder_angle_idx])\n            min_angle = np.min(joint_angles[:, shoulder_angle_idx])\n            rom = max_angle - min_angle\n            \n            # Normalize: typical shoulder rotation is about 90 degrees\n            normalized_rom = min(rom / 90.0, 1.0)\n            \n        elif class_name == \"ankle_dorsiflexion\":\n            # For ankle dorsiflexion\n            ankle_angle_idx = 8  # Right ankle\n            max_angle = np.max(joint_angles[:, ankle_angle_idx])\n            min_angle = np.min(joint_angles[:, ankle_angle_idx])\n            rom = max_angle - min_angle\n            \n            # Normalize: typical ankle dorsiflexion is about 20-30 degrees\n            normalized_rom = min(rom / 30.0, 1.0)\n            \n        elif class_name == \"hip_abduction\":\n            # For hip abduction\n            hip_angle_idx = 5  # Left hip\n            max_angle = np.max(joint_angles[:, hip_angle_idx])\n            min_angle = np.min(joint_angles[:, hip_angle_idx])\n            rom = max_angle - min_angle\n            \n            # Normalize: typical hip abduction is about 45-50 degrees\n            normalized_rom = min(rom / 50.0, 1.0)\n            \n        elif class_name == \"wrist_flexion\":\n            # For wrist flexion - approximate since direct measurement is challenging\n            elbow_angle_idx = 0  # Right elbow as proxy\n            variation = np.std(joint_angles[:, elbow_angle_idx])\n            \n            # Normalize based on expected variation\n            normalized_rom = min(variation / 15.0, 1.0)\n            \n        else:\n            # Default case - average all joint angles\n            all_roms = []\n            for i in range(joint_angles.shape[1]):\n                max_angle = np.max(joint_angles[:, i])\n                min_angle = np.min(joint_angles[:, i])\n                all_roms.append(max_angle - min_angle)\n            \n            normalized_rom = min(np.mean(all_roms) / 50.0, 1.0)\n        \n        return normalized_rom\n    \n    def calculate_movement_speed(self, joint_angles):\n        \"\"\"\n        Calculate the movement speed based on joint angle changes\n        Returns a value between 0 (very slow) and 1 (very fast)\n        \"\"\"\n        # Calculate angular velocities (change in angle per frame)\n        angular_velocities = np.abs(np.diff(joint_angles, axis=0))\n        \n        # Get mean angular velocity across all joints and frames\n        mean_velocity = np.mean(angular_velocities)\n        \n        # Normalize to a 0-1 scale (assuming max reasonable velocity is 20 degrees per frame)\n        normalized_speed = min(mean_velocity / 20.0, 1.0)\n        \n        return normalized_speed\n    \n    def visualize_sequence(self, landmarks_sequence, class_name=None):\n        \"\"\"Visualize a sequence of pose landmarks for analysis\"\"\"\n        # Create a blank canvas\n        img_height, img_width = 480, 640\n        frames = []\n        \n        mp_drawing = mp.solutions.drawing_utils\n        mp_pose = mp.solutions.pose\n        \n        # We'll use a different approach since PoseLandmarkList is not directly accessible\n        with mp_pose.Pose() as pose:\n            for i in range(landmarks_sequence.shape[0]):\n                # Create a blank canvas for this frame\n                canvas = np.ones((img_height, img_width, 3), dtype=np.uint8) * 255\n                \n                # We need to create a custom landmark list without using PoseLandmarkList\n                # First, reshape the landmarks to the format expected by draw_landmarks\n                reshaped_landmarks = landmarks_sequence[i].reshape(33, 4)\n                \n                # Create a custom landmark list using a dictionary\n                landmark_dict = {}\n                for j in range(33):\n                    landmark_dict[j] = (\n                        reshaped_landmarks[j, 0],  # x\n                        reshaped_landmarks[j, 1],  # y\n                        reshaped_landmarks[j, 2],  # z\n                        reshaped_landmarks[j, 3]   # visibility\n                    )\n                \n                # Draw the landmarks manually using lines and circles\n                connections = mp_pose.POSE_CONNECTIONS\n                for connection in connections:\n                    start_idx = connection[0]\n                    end_idx = connection[1]\n                    \n                    if start_idx in landmark_dict and end_idx in landmark_dict:\n                        start_point = (\n                            int(landmark_dict[start_idx][0] * img_width),\n                            int(landmark_dict[start_idx][1] * img_height)\n                        )\n                        end_point = (\n                            int(landmark_dict[end_idx][0] * img_width),\n                            int(landmark_dict[end_idx][1] * img_height)\n                        )\n                        \n                        # Draw line between landmarks if both visible\n                        if landmark_dict[start_idx][3] > 0.5 and landmark_dict[end_idx][3] > 0.5:\n                            cv2.line(canvas, start_point, end_point, (245, 66, 230), 2)\n                \n                # Draw circles for each landmark\n                for j, landmark in landmark_dict.items():\n                    if landmark[3] > 0.5:  # If visibility is high enough\n                        point = (\n                            int(landmark[0] * img_width),\n                            int(landmark[1] * img_height)\n                        )\n                        cv2.circle(canvas, point, 4, (245, 117, 66), -1)\n                \n                # Add frame number and class name if provided\n                cv2.putText(canvas, f\"Frame: {i+1}/{landmarks_sequence.shape[0]}\", \n                           (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 0), 2)\n                \n                if class_name:\n                    cv2.putText(canvas, f\"Class: {class_name}\", \n                               (10, 60), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 0), 2)\n                \n                frames.append(canvas)\n        \n        # Display frames in a grid\n        rows = int(np.ceil(np.sqrt(len(frames))))\n        cols = int(np.ceil(len(frames) / rows))\n        \n        grid = np.ones((rows * img_height, cols * img_width, 3), dtype=np.uint8) * 255\n        \n        for i, frame in enumerate(frames):\n            r = i // cols\n            c = i % cols\n            grid[r*img_height:(r+1)*img_height, c*img_width:(c+1)*img_width] = frame\n        \n        plt.figure(figsize=(20, 20))\n        plt.imshow(cv2.cvtColor(grid, cv2.COLOR_BGR2RGB))\n        plt.axis('off')\n        plt.title(f\"Pose Sequence Visualization {'' if class_name is None else f'- {class_name}'}\")\n        plt.show()\n        \n        return grid\n    \n    def run_demo(self):\n        \"\"\"Run a complete demonstration of the rehabilitation movement analysis system\"\"\"\n        print(\"Starting Sports Rehabilitation Movement Analysis Demo...\")\n        \n        # Simulate data since we might not have real data available\n        X, y, class_names = self.simulate_data()\n        \n        # Update number of classes\n        self.num_classes = len(class_names)\n        \n        # Split data\n        X_train, X_test, y_train, y_test = train_test_split(\n            X, y, test_size=0.2, random_state=42, stratify=y\n        )\n        \n        # Build and train model\n        print(\"\\nTraining model...\")\n        self.train_model(X_train, y_train, epochs=50, batch_size=32)\n        \n        # Evaluate model\n        print(\"\\nEvaluating model...\")\n        self.evaluate_model(X_test, y_test, class_names)\n        \n        # Save model\n        print(\"\\nSaving model...\")\n        self.save_model(\"rehabilitation_model.keras\")\n        \n        # Demo analysis on a test sample\n        print(\"\\nDemonstrating movement analysis...\")\n        test_idx = np.random.choice(len(X_test))\n        test_sequence = X_test[test_idx]\n        true_class = class_names[y_test[test_idx]]\n        \n        print(f\"Analyzing test sample (true class: {true_class})\")\n        \n        # Since we don't have an actual video file for the demo, \n        # we'll adapt the analyze_movement method to work directly with our sequence\n        enhanced_features = self.feature_engineering(np.expand_dims(test_sequence, axis=0))\n        prediction = self.model.predict(enhanced_features)[0]\n        predicted_class_idx = np.argmax(prediction)\n        confidence = prediction[predicted_class_idx]\n        predicted_class = class_names[predicted_class_idx]\n        \n        print(f\"Detected exercise: {predicted_class} (Confidence: {confidence:.2f})\")\n        \n        # Generate feedback\n        feedback = self.generate_feedback(test_sequence, predicted_class_idx, class_names)\n        print(\"\\nMovement Analysis Feedback:\")\n        for item in feedback:\n            print(f\"- {item}\")\n        \n        # Visualize sequence\n        print(\"\\nVisualizing movement sequence...\")\n        self.visualize_sequence(test_sequence, predicted_class)\n        \n        print(\"\\nDemo completed successfully!\")\n        \n        return {\n            'accuracy': self.model.evaluate(self.feature_engineering(X_test), y_test)[1],\n            'class_names': class_names,\n            'example_feedback': feedback\n        }\n\n    def visualize_posture_correction(self, image_path, exercise_type=None):\n        \"\"\"\n        Visualize posture correction by comparing the detected pose with ideal form\n        \n        Args:\n            image_path: Path to the input image\n            exercise_type: Type of exercise for specific corrections ('knee_extension', \n                          'shoulder_rotation', 'ankle_dorsiflexion', 'hip_abduction', 'wrist_flexion')\n                          \n        Returns:\n            Annotated image with posture correction visualization\n        \"\"\"\n        # Read the image\n        image = cv2.imread(image_path)\n        if image is None:\n            raise ValueError(f\"Could not read image from {image_path}\")\n        \n        # Convert BGR to RGB\n        image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n        height, width, _ = image.shape\n        \n        # Process the image to detect pose\n        with self.mp_pose.Pose(\n            static_image_mode=True,\n            model_complexity=2,\n            min_detection_confidence=0.5\n        ) as pose:\n            results = pose.process(image_rgb)\n        \n        # Create output visualization image\n        output_image = image_rgb.copy()\n        \n        # If no pose detected\n        if not results.pose_landmarks:\n            cv2.putText(output_image, \"No pose detected\", (50, 50), \n                        cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 0, 0), 2)\n            plt.figure(figsize=(12, 12))\n            plt.imshow(output_image)\n            plt.title(\"Pose Detection Failed\")\n            plt.axis('off')\n            plt.show()\n            return output_image\n        \n        # Draw pose landmarks\n        self.mp_drawing.draw_landmarks(\n            output_image,\n            results.pose_landmarks,\n            self.mp_pose.POSE_CONNECTIONS,\n            self.mp_drawing.DrawingSpec(color=(245, 117, 66), thickness=2, circle_radius=2),\n            self.mp_drawing.DrawingSpec(color=(245, 66, 230), thickness=2, circle_radius=1)\n        )\n        \n        # Define ideal posture angles based on exercise type\n        ideal_angles = self._get_ideal_angles(exercise_type)\n        \n        # Extract landmarks from the detected pose\n        landmarks = []\n        for landmark in results.pose_landmarks.landmark:\n            landmarks.append([landmark.x, landmark.y, landmark.z, landmark.visibility])\n        landmarks = np.array(landmarks)\n        \n        # Calculate joint angles from the detected pose\n        detected_angles = self._calculate_key_angles(landmarks)\n        \n        # Draw angle corrections\n        output_image = self._draw_angle_corrections(\n            output_image, \n            results.pose_landmarks, \n            detected_angles, \n            ideal_angles,\n            width,\n            height\n        )\n        \n        # Add exercise-specific guidance\n        output_image = self._add_exercise_guidance(output_image, exercise_type, detected_angles, ideal_angles)\n        \n        # Display the image\n        plt.figure(figsize=(12, 12))\n        plt.imshow(output_image)\n        plt.title(f\"Posture Correction - {exercise_type if exercise_type else 'General'}\")\n        plt.axis('off')\n        plt.show()\n        \n        return output_image\n    \n    def _get_ideal_angles(self, exercise_type):\n        \"\"\"Get ideal joint angles for a specific exercise type\"\"\"\n        # Define ideal angles for different exercise types (in degrees)\n        if exercise_type == \"knee_extension\":\n            return {\n                \"right_knee\": 175.0,  # Nearly straight leg at full extension\n                \"right_hip\": 100.0,   # Slight hip flexion\n                \"right_ankle\": 85.0   # Neutral ankle position\n            }\n        elif exercise_type == \"shoulder_rotation\":\n            return {\n                \"right_shoulder\": 90.0,  # Arm at 90 degrees from body\n                \"right_elbow\": 90.0      # Elbow at 90 degrees\n            }\n        elif exercise_type == \"ankle_dorsiflexion\":\n            return {\n                \"right_ankle\": 75.0,  # Dorsiflexed ankle\n                \"right_knee\": 170.0   # Slightly flexed knee\n            }\n        elif exercise_type == \"hip_abduction\":\n            return {\n                \"left_hip_frontal\": 45.0,  # Hip abducted 45 degrees from midline\n                \"left_knee\": 175.0         # Straight leg\n            }\n        elif exercise_type == \"wrist_flexion\":\n            return {\n                \"right_wrist\": 60.0,  # Wrist flexed\n                \"right_elbow\": 165.0  # Arm nearly straight\n            }\n        else:\n            # Default generic ideal angles for good posture\n            return {\n                \"spine\": 170.0,           # Nearly straight spine\n                \"right_shoulder\": 90.0,   # Neutral shoulder\n                \"left_shoulder\": 90.0,\n                \"right_hip\": 170.0,       # Neutral hip alignment\n                \"left_hip\": 170.0,\n                \"right_knee\": 175.0,      # Nearly straight knee\n                \"left_knee\": 175.0,\n                \"head_alignment\": 160.0   # Head properly aligned with spine\n            }\n    \n    def _calculate_key_angles(self, landmarks):\n        \"\"\"Calculate key joint angles from landmarks\"\"\"\n        angles = {}\n        \n        # Helper function to calculate angle between 3 points\n        def calculate_angle(p1_idx, p2_idx, p3_idx):\n            p1 = landmarks[p1_idx, :2]  # Use only x,y coordinates\n            p2 = landmarks[p2_idx, :2]\n            p3 = landmarks[p3_idx, :2]\n            \n            # Create vectors\n            v1 = p1 - p2\n            v2 = p3 - p2\n            \n            # Calculate dot product and magnitudes\n            dot_product = np.dot(v1, v2)\n            mag_v1 = np.linalg.norm(v1)\n            mag_v2 = np.linalg.norm(v2)\n            \n            # Calculate cosine and convert to degrees\n            cosine = dot_product / (mag_v1 * mag_v2)\n            angle = np.degrees(np.arccos(np.clip(cosine, -1.0, 1.0)))\n            return angle\n    \n        # Calculate right knee angle (hip-knee-ankle)\n        angles[\"right_knee\"] = calculate_angle(23, 25, 27)\n        \n        # Calculate left knee angle (hip-knee-ankle)\n        angles[\"left_knee\"] = calculate_angle(24, 26, 28)\n        \n        # Calculate right hip angle (shoulder-hip-knee)\n        angles[\"right_hip\"] = calculate_angle(11, 23, 25)\n        \n        # Calculate left hip angle (shoulder-hip-knee)\n        angles[\"left_hip\"] = calculate_angle(12, 24, 26)\n        \n        # Calculate right shoulder angle (elbow-shoulder-hip)\n        angles[\"right_shoulder\"] = calculate_angle(13, 11, 23)\n        \n        # Calculate left shoulder angle (elbow-shoulder-hip)\n        angles[\"left_shoulder\"] = calculate_angle(14, 12, 24)\n        \n        # Calculate right elbow angle (shoulder-elbow-wrist)\n        angles[\"right_elbow\"] = calculate_angle(11, 13, 15)\n        \n        # Calculate left elbow angle (shoulder-elbow-wrist)\n        angles[\"left_elbow\"] = calculate_angle(12, 14, 16)\n        \n        # Calculate right ankle angle (knee-ankle-foot)\n        angles[\"right_ankle\"] = calculate_angle(25, 27, 31)\n        \n        # Calculate left ankle angle (knee-ankle-foot)\n        angles[\"left_ankle\"] = calculate_angle(26, 28, 32)\n        \n        # Calculate spine alignment (nose-shoulder center-hip center)\n        mid_shoulder = (landmarks[11, :2] + landmarks[12, :2]) / 2\n        mid_hip = (landmarks[23, :2] + landmarks[24, :2]) / 2\n        angles[\"spine\"] = calculate_angle(0, 11, 23)  # Using nose, right shoulder, right hip as proxy\n        \n        # Calculate head alignment\n        angles[\"head_alignment\"] = calculate_angle(0, 11, 12)  # nose to shoulders\n        \n        # Calculate hip frontal plane angles (for abduction)\n        # Use hip center as reference\n        mid_hip_x = (landmarks[23, 0] + landmarks[24, 0]) / 2\n        \n        # Create virtual point directly below left hip for frontal plane reference\n        virtual_point_below_left_hip = np.array([landmarks[24, 0], landmarks[24, 1] + 0.2])\n        left_knee = landmarks[26, :2]\n        v1 = virtual_point_below_left_hip - landmarks[24, :2]\n        v2 = left_knee - landmarks[24, :2]\n        \n        # Calculate angle in frontal plane\n        dot_product = np.dot(v1, v2)\n        mag_v1 = np.linalg.norm(v1)\n        mag_v2 = np.linalg.norm(v2)\n        cosine = dot_product / (mag_v1 * mag_v2)\n        angles[\"left_hip_frontal\"] = np.degrees(np.arccos(np.clip(cosine, -1.0, 1.0)))\n        \n        # Do the same for right hip\n        virtual_point_below_right_hip = np.array([landmarks[23, 0], landmarks[23, 1] + 0.2])\n        right_knee = landmarks[25, :2]\n        v1 = virtual_point_below_right_hip - landmarks[23, :2]\n        v2 = right_knee - landmarks[23, :2]\n        \n        dot_product = np.dot(v1, v2)\n        mag_v1 = np.linalg.norm(v1)\n        mag_v2 = np.linalg.norm(v2)\n        cosine = dot_product / (mag_v1 * mag_v2)\n        angles[\"right_hip_frontal\"] = np.degrees(np.arccos(np.clip(cosine, -1.0, 1.0)))\n        \n        return angles\n    \n    def _draw_angle_corrections(self, image, pose_landmarks, detected_angles, ideal_angles, img_width, img_height):\n        \"\"\"Draw angle corrections on the image\"\"\"\n        # Dictionary to map angle names to landmark indices for visualization\n        angle_landmarks = {\n            \"right_knee\": (23, 25, 27),      # hip, knee, ankle\n            \"left_knee\": (24, 26, 28),\n            \"right_hip\": (11, 23, 25),       # shoulder, hip, knee\n            \"left_hip\": (12, 24, 26),\n            \"right_shoulder\": (13, 11, 23),  # elbow, shoulder, hip\n            \"left_shoulder\": (14, 12, 24),\n            \"right_elbow\": (11, 13, 15),     # shoulder, elbow, wrist\n            \"left_elbow\": (12, 14, 16),\n            \"right_ankle\": (25, 27, 31),     # knee, ankle, foot\n            \"left_ankle\": (26, 28, 32),\n            \"right_hip_frontal\": (23, 25, 27),  # simplified - actually needs 3D calculation\n            \"left_hip_frontal\": (24, 26, 28)\n        }\n        \n        # Create a copy to draw on\n        annotated_image = image.copy()\n        \n        # Draw angle corrections for angles that are in both detected and ideal\n        for angle_name, ideal_value in ideal_angles.items():\n            if angle_name in detected_angles and angle_name in angle_landmarks:\n                detected_value = detected_angles[angle_name]\n                difference = detected_value - ideal_value\n                \n                # Get landmarks for this angle\n                p1_idx, p2_idx, p3_idx = angle_landmarks[angle_name]\n                \n                # Convert landmark indices to pixel coordinates\n                p1 = (int(pose_landmarks.landmark[p1_idx].x * img_width),\n                      int(pose_landmarks.landmark[p1_idx].y * img_height))\n                p2 = (int(pose_landmarks.landmark[p2_idx].x * img_width),\n                      int(pose_landmarks.landmark[p2_idx].y * img_height))\n                p3 = (int(pose_landmarks.landmark[p3_idx].x * img_width),\n                      int(pose_landmarks.landmark[p3_idx].y * img_height))\n                \n                # Draw the angle value text\n                cv2.putText(annotated_image, f\"{detected_value:.1f}°\", \n                            (p2[0] + 10, p2[1] - 10), \n                            cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 2)\n                \n                # Calculate the correction color based on difference\n                # Green if close to ideal, yellow if moderate difference, red if significant difference\n                tolerance = 15.0  # degrees\n                if abs(difference) < tolerance/3:\n                    color = (0, 255, 0)  # Green\n                    # No need for correction arrow if close enough\n                elif abs(difference) < tolerance:\n                    color = (0, 255, 255)  # Yellow\n                    self._draw_correction_arrow(annotated_image, p1, p2, p3, detected_value, ideal_value)\n                else:\n                    color = (255, 0, 0)  # Red\n                    self._draw_correction_arrow(annotated_image, p1, p2, p3, detected_value, ideal_value)\n                \n                # Draw angle arc\n                self._draw_angle_arc(annotated_image, p1, p2, p3, color)\n        \n        return annotated_image\n    \n    def _draw_angle_arc(self, image, p1, p2, p3, color):\n        \"\"\"Draw an arc to visualize the angle\"\"\"\n        # Calculate vectors from p2 to p1 and p2 to p3\n        v1 = np.array([p1[0] - p2[0], p1[1] - p2[1]])\n        v2 = np.array([p3[0] - p2[0], p3[1] - p2[1]])\n        \n        # Calculate unit vectors\n        v1_unit = v1 / np.linalg.norm(v1)\n        v2_unit = v2 / np.linalg.norm(v2)\n        \n        # Calculate angle between vectors\n        angle = np.arccos(np.clip(np.dot(v1_unit, v2_unit), -1.0, 1.0))\n        \n        # Calculate angle in degrees\n        angle_degrees = np.degrees(angle)\n        \n        # Determine the start angle\n        start_angle = np.arctan2(v1[1], v1[0])\n        \n        # Draw the arc\n        radius = 30  # radius of the arc\n        axes = (radius, radius)\n        start_angle_degrees = np.degrees(start_angle)\n        \n        # OpenCV's ellipse expects angles in degrees\n        cv2.ellipse(image, p2, axes, 0, start_angle_degrees, start_angle_degrees + angle_degrees, color, 2)\n    \n    def _draw_correction_arrow(self, image, p1, p2, p3, current_angle, target_angle):\n        \"\"\"Draw an arrow showing the direction to correct the angle\"\"\"\n        # We need to calculate where the limb should be to achieve the target angle\n        \n        # Calculate vectors\n        v1 = np.array([p1[0] - p2[0], p1[1] - p2[1]])\n        v2 = np.array([p3[0] - p2[0], p3[1] - p2[1]])\n        \n        # Calculate lengths\n        length_v2 = np.linalg.norm(v2)\n        \n        # Calculate current angle in radians\n        current_rad = np.arctan2(v2[1], v2[0]) - np.arctan2(v1[1], v1[0])\n        target_rad = np.radians(target_angle)\n        \n        # Difference in radians\n        diff_rad = target_rad - current_rad\n        \n        # Calculate where p3 should be to achieve target angle\n        # This is simplified - we're just rotating v2 by the difference\n        rotation_matrix = np.array([\n            [np.cos(diff_rad), -np.sin(diff_rad)],\n            [np.sin(diff_rad), np.cos(diff_rad)]\n        ])\n        \n        # Rotate v2 to get the target vector\n        target_v2 = np.dot(rotation_matrix, v2)\n        \n        # Scale back to original length\n        target_v2 = target_v2 / np.linalg.norm(target_v2) * length_v2\n        \n        # Calculate target point\n        target_p3 = (int(p2[0] + target_v2[0]), int(p2[1] + target_v2[1]))\n        \n        # Draw arrow from current p3 to target p3\n        cv2.arrowedLine(image, p3, target_p3, (0, 165, 255), 2, tipLength=0.3)\n    \n    def _add_exercise_guidance(self, image, exercise_type, detected_angles, ideal_angles):\n        \"\"\"Add exercise-specific guidance text to the image\"\"\"\n        height, width, _ = image.shape\n        \n        # Add title with exercise type\n        title = f\"Exercise: {exercise_type if exercise_type else 'General Posture'}\"\n        cv2.putText(image, title, (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.8, (0, 0, 0), 2)\n        \n        # Start position for text\n        y_pos = 70\n        \n        # Add exercise-specific guidance\n        if exercise_type == \"knee_extension\":\n            guidance = [\n                \"Focus Points:\",\n                \"1. Keep back straight\",\n                \"2. Extend knee fully\",\n                \"3. Control movement speed\"\n            ]\n            \n            # Add specific angle feedback\n            if \"right_knee\" in detected_angles and \"right_knee\" in ideal_angles:\n                diff = detected_angles[\"right_knee\"] - ideal_angles[\"right_knee\"]\n                if abs(diff) > 15:\n                    guidance.append(f\"* Knee extension: {'Extend more' if diff < 0 else 'Reduce extension'}\")\n            \n        elif exercise_type == \"shoulder_rotation\":\n            guidance = [\n                \"Focus Points:\",\n                \"1. Keep elbow at 90°\",\n                \"2. Rotate from shoulder\",\n                \"3. Maintain upright posture\"\n            ]\n            \n            # Add specific angle feedback\n            if \"right_shoulder\" in detected_angles and \"right_shoulder\" in ideal_angles:\n                diff = detected_angles[\"right_shoulder\"] - ideal_angles[\"right_shoulder\"]\n                if abs(diff) > 15:\n                    guidance.append(f\"* Shoulder angle: {'Raise arm' if diff < 0 else 'Lower arm'}\")\n            \n        elif exercise_type == \"ankle_dorsiflexion\":\n            guidance = [\n                \"Focus Points:\",\n                \"1. Point toes upward\",\n                \"2. Keep heel on ground\",\n                \"3. Feel stretch in calf\"\n            ]\n            \n            # Add specific angle feedback\n            if \"right_ankle\" in detected_angles and \"right_ankle\" in ideal_angles:\n                diff = detected_angles[\"right_ankle\"] - ideal_angles[\"right_ankle\"]\n                if abs(diff) > 10:\n                    guidance.append(f\"* Ankle angle: {'Flex foot more' if diff > 0 else 'Reduce flexion'}\")\n            \n        elif exercise_type == \"hip_abduction\":\n            guidance = [\n                \"Focus Points:\",\n                \"1. Keep leg straight\",\n                \"2. Move leg out to side\",\n                \"3. Keep pelvis stable\"\n            ]\n            \n            # Add specific angle feedback\n            if \"left_hip_frontal\" in detected_angles and \"left_hip_frontal\" in ideal_angles:\n                diff = detected_angles[\"left_hip_frontal\"] - ideal_angles[\"left_hip_frontal\"]\n                if abs(diff) > 10:\n                    guidance.append(f\"* Hip abduction: {'Increase abduction' if diff < 0 else 'Reduce abduction'}\")\n            \n        elif exercise_type == \"wrist_flexion\":\n            guidance = [\n                \"Focus Points:\",\n                \"1. Keep forearm stable\",\n                \"2. Bend at wrist only\",\n                \"3. Control movement speed\"\n            ]\n            \n            # Add specific angle feedback\n            if \"right_elbow\" in detected_angles and \"right_elbow\" in ideal_angles:\n                diff = detected_angles[\"right_elbow\"] - ideal_angles[\"right_elbow\"]\n                if abs(diff) > 15:\n                    guidance.append(f\"* Elbow: {'Straighten arm more' if diff < 0 else 'Slightly bend elbow'}\")\n            \n        else:\n            guidance = [\n                \"General Posture Tips:\",\n                \"1. Keep spine straight\",\n                \"2. Shoulders back and down\",\n                \"3. Head in neutral position\",\n                \"4. Distribute weight evenly\"\n            ]\n        \n        # Draw all guidance text\n        for i, line in enumerate(guidance):\n            cv2.putText(image, line, (10, y_pos + i*30), \n                       cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 0), 2)\n        \n        # Add color legend at the bottom\n        legend_y = height - 90\n        cv2.putText(image, \"Color Guide:\", (10, legend_y), \n                   cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 0), 2)\n        \n        cv2.circle(image, (30, legend_y + 30), 10, (0, 255, 0), -1)\n        cv2.putText(image, \"Good alignment\", (50, legend_y + 35), \n                   cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 0, 0), 2)\n        \n        cv2.circle(image, (30, legend_y + 60), 10, (0, 255, 255), -1)\n        cv2.putText(image, \"Minor correction needed\", (50, legend_y + 65), \n                   cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 0, 0), 2)\n        \n        cv2.circle(image, (230, legend_y + 30), 10, (255, 0, 0), -1)\n        cv2.putText(image, \"Major correction needed\", (250, legend_y + 35), \n                   cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 0, 0), 2)\n        \n        cv2.circle(image, (230, legend_y + 60), 10, (0, 165, 255), -1)\n        cv2.putText(image, \"Correction direction\", (250, legend_y + 65), \n                   cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 0, 0), 2)\n        \n        return image\n\n    def visualize_sequence(self, landmarks_sequence, class_name=None):\n        \"\"\"Visualize a sequence of pose landmarks for analysis\"\"\"\n        # Create a blank canvas\n        img_height, img_width = 480, 640\n        frames = []\n        \n        # We'll use a different approach since PoseLandmarkList is not directly accessible\n        for i in range(landmarks_sequence.shape[0]):\n            # Create a blank canvas for this frame\n            canvas = np.ones((img_height, img_width, 3), dtype=np.uint8) * 255\n            \n            # We need to create a custom landmark list without using PoseLandmarkList\n            # First, reshape the landmarks to the format expected by draw_landmarks\n            reshaped_landmarks = landmarks_sequence[i].reshape(33, 4)\n            \n            # Create a custom landmark list using a dictionary\n            landmark_dict = {}\n            for j in range(33):\n                landmark_dict[j] = (\n                    reshaped_landmarks[j, 0],  # x\n                    reshaped_landmarks[j, 1],  # y\n                    reshaped_landmarks[j, 2],  # z\n                    reshaped_landmarks[j, 3]   # visibility\n                )\n            \n            # Get MediaPipe pose connections\n            connections = [(pair[0], pair[1]) for pair in mp.solutions.pose.POSE_CONNECTIONS]\n            \n            # Draw the landmarks manually using lines and circles\n            for connection in connections:\n                start_idx = connection[0]\n                end_idx = connection[1]\n                \n                if start_idx in landmark_dict and end_idx in landmark_dict:\n                    start_point = (\n                        int(landmark_dict[start_idx][0] * img_width),\n                        int(landmark_dict[start_idx][1] * img_height)\n                    )\n                    end_point = (\n                        int(landmark_dict[end_idx][0] * img_width),\n                        int(landmark_dict[end_idx][1] * img_height)\n                    )\n                    \n                    # Draw line between landmarks if both visible\n                    if landmark_dict[start_idx][3] > 0.5 and landmark_dict[end_idx][3] > 0.5:\n                        cv2.line(canvas, start_point, end_point, (245, 66, 230), 2)\n            \n            # Draw circles for each landmark\n            for j, landmark in landmark_dict.items():\n                if landmark[3] > 0.5:  # If visibility is high enough\n                    point = (\n                        int(landmark[0] * img_width),\n                        int(landmark[1] * img_height)\n                    )\n                    cv2.circle(canvas, point, 4, (245, 117, 66), -1)\n            \n            # Add frame number and class name if provided\n            cv2.putText(canvas, f\"Frame: {i+1}/{landmarks_sequence.shape[0]}\", \n                       (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 0), 2)\n            \n            if class_name:\n                cv2.putText(canvas, f\"Class: {class_name}\", \n                           (10, 60), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 0), 2)\n            \n            frames.append(canvas)\n        \n        # Display frames in a grid\n        rows = int(np.ceil(np.sqrt(len(frames))))\n        cols = int(np.ceil(len(frames) / rows))\n        \n        grid = np.ones((rows * img_height, cols * img_width, 3), dtype=np.uint8) * 255\n        \n        for i, frame in enumerate(frames):\n            r = i // cols\n            c = i % cols\n            grid[r*img_height:(r+1)*img_height, c*img_width:(c+1)*img_width] = frame\n        \n        plt.figure(figsize=(20, 20))\n        plt.imshow(cv2.cvtColor(grid, cv2.COLOR_BGR2RGB))\n        plt.axis('off')\n        plt.title(f\"Pose Sequence Visualization {'' if class_name is None else f'- {class_name}'}\")\n        plt.show()\n        \n        return grid\n    \n    def visualize_posture_correction(self, image_path, exercise_type):\n        \"\"\"\n        Visualize posture correction for a given image and exercise type.\n        Uses a protobuf-compatible approach to handle MediaPipe pose detection.\n        \"\"\"\n        try:\n            # First try to downgrade protobuf if not already done\n            try:\n                import subprocess\n                # Check current protobuf version\n                import google.protobuf\n                if google.protobuf.__version__ > '3.20.3':\n                    print(f\"Current protobuf version: {google.protobuf.__version__}\")\n                    print(\"Attempting to downgrade protobuf to version 3.20.3...\")\n                    subprocess.check_call(['pip', 'install', 'protobuf==3.20.3'])\n                    print(\"Protobuf downgraded. Please restart your runtime for changes to take effect.\")\n                    return None\n            except:\n                pass  # Continue with backup solution if pip install fails\n            \n            # Load image\n            image = cv2.imread(image_path)\n            if image is None:\n                print(f\"Error: Could not load image from {image_path}\")\n                return None\n            \n            image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n            height, width, _ = image.shape\n            \n            # Create a copy for visualization\n            output_image = image.copy()\n            \n            # Create a pose detector with custom protobuf handling\n            try:\n                with mp.solutions.pose.Pose(\n                    static_image_mode=True,\n                    model_complexity=2,\n                    min_detection_confidence=0.5\n                ) as pose:\n                    results = pose.process(image_rgb)\n                    \n                    # Check if pose landmarks were detected\n                    if not results.pose_landmarks:\n                        print(\"No pose landmarks detected in the image.\")\n                        cv2.putText(output_image, \"No pose detected\", (50, 50), \n                                  cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 2)\n                        return output_image\n                    \n                    # Extract landmarks\n                    landmarks = []\n                    for landmark in results.pose_landmarks.landmark:\n                        landmarks.append([\n                            landmark.x, \n                            landmark.y, \n                            landmark.z, \n                            landmark.visibility\n                        ])\n                    \n                    landmarks_array = np.array(landmarks).flatten()\n                    \n                    expected_features = self.scaler.mean_.shape[0]\n                    input_features = len(landmarks_array)\n                    \n                    if input_features < expected_features:\n                        # Pad with zeros if input is smaller\n                        padded = np.pad(landmarks_array, (0, expected_features - input_features))\n                    elif input_features > expected_features:\n                        # Trim extra values if input is larger\n                        padded = landmarks_array[:expected_features]\n                    else:\n                        padded = landmarks_array\n                    \n                    landmarks_scaled = self.scaler.transform([padded])\n                    landmarks_scaled = np.array(landmarks_scaled, dtype=np.float32)\n\n                    if landmarks_scaled.ndim == 1:\n                        landmarks_scaled = np.expand_dims(landmarks_scaled, axis=0)\n                    \n                    prediction = self.model.predict(landmarks_scaled)\n\n                    \n                    # Make prediction with your model\n                    prediction = self.model.predict(landmarks_scaled)\n                    \n                    # Interpret the prediction based on your model output\n                    is_correct = np.argmax(prediction)  # Assuming classification model\n                    \n                    # Draw pose landmarks on the image\n                    mp.solutions.drawing_utils.draw_landmarks(\n                        output_image, \n                        results.pose_landmarks,\n                        mp.solutions.pose.POSE_CONNECTIONS,\n                        landmark_drawing_spec=mp.solutions.drawing_utils.DrawingSpec(\n                            color=(0, 255, 0), thickness=2, circle_radius=2),\n                        connection_drawing_spec=mp.solutions.drawing_utils.DrawingSpec(\n                            color=(245, 66, 230), thickness=2)\n                    )\n                    \n                    # Add exercise type and posture feedback\n                    cv2.putText(output_image, f\"Exercise: {exercise_type}\", (10, 30), \n                              cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 0), 2)\n                    \n                    correction_text = \"Correct Posture\" if is_correct == 1 else \"Incorrect Posture\"\n                    correction_color = (0, 255, 0) if is_correct == 1 else (0, 0, 255)\n                    \n                    cv2.putText(output_image, correction_text, (10, 60), \n                              cv2.FONT_HERSHEY_SIMPLEX, 0.7, correction_color, 2)\n                    \n                    # Highlight specific areas for correction based on exercise type\n                    # This would depend on your specific exercise types and correction rules\n                    if is_correct == 0:  # If posture is incorrect\n                        # Add specific corrections based on exercise_type\n                        # Example:\n                        if exercise_type == \"squat\":\n                            knee_status = self._check_knee_alignment(results.pose_landmarks)\n                            back_status = self._check_back_alignment(results.pose_landmarks)\n                            \n                            correction_y = 90\n                            if knee_status != \"good\":\n                                cv2.putText(output_image, f\"Knees: {knee_status}\", (10, correction_y), \n                                          cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 0, 255), 2)\n                                correction_y += 30\n                            \n                            if back_status != \"good\":\n                                cv2.putText(output_image, f\"Back: {back_status}\", (10, correction_y), \n                                          cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 0, 255), 2)\n                        \n                        # Add more exercise-specific corrections as needed\n                    \n                    # Display the output image with corrections\n                    plt.figure(figsize=(10, 10))\n                    plt.imshow(cv2.cvtColor(output_image, cv2.COLOR_BGR2RGB))\n                    plt.axis('off')\n                    plt.title(f\"Posture Analysis - {exercise_type}\")\n                    plt.show()\n                    \n                    return output_image\n                    \n            except AttributeError as e:\n                if \"GetMessageClass\" in str(e):\n                    # Fallback for protobuf error - use the basic visualization without MediaPipe\n                    print(\"Protobuf version compatibility issue detected.\")\n                    print(\"Falling back to basic visualization without MediaPipe.\")\n                    \n                    # Create a basic visualization\n                    cv2.putText(image, f\"Exercise: {exercise_type}\", (10, 30), \n                              cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 0), 2)\n                    cv2.putText(image, \"MediaPipe error: Try 'pip install protobuf==3.20.3'\", \n                              (10, 60), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 0, 255), 2)\n                    \n                    plt.figure(figsize=(10, 10))\n                    plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))\n                    plt.axis('off')\n                    plt.title(f\"Basic View - {exercise_type} (MediaPipe Error)\")\n                    plt.show()\n                    \n                    return image\n                else:\n                    # Re-raise if it's another type of error\n                    raise e\n                    \n        except Exception as e:\n            print(f\"Error in posture correction visualization: {str(e)}\")\n            # Log the full error for debugging\n            import traceback\n            traceback.print_exc()\n            return None\n    \n    def _check_knee_alignment(self, pose_landmarks):\n        \"\"\"Check knee alignment for exercises like squats\"\"\"\n        # Get relevant landmarks\n        left_hip = pose_landmarks.landmark[mp.solutions.pose.PoseLandmark.LEFT_HIP]\n        left_knee = pose_landmarks.landmark[mp.solutions.pose.PoseLandmark.LEFT_KNEE]\n        left_ankle = pose_landmarks.landmark[mp.solutions.pose.PoseLandmark.LEFT_ANKLE]\n        \n        right_hip = pose_landmarks.landmark[mp.solutions.pose.PoseLandmark.RIGHT_HIP]\n        right_knee = pose_landmarks.landmark[mp.solutions.pose.PoseLandmark.RIGHT_KNEE]\n        right_ankle = pose_landmarks.landmark[mp.solutions.pose.PoseLandmark.RIGHT_ANKLE]\n        \n        # Check if knees are over ankles\n        left_knee_over_ankle = abs(left_knee.x - left_ankle.x) < 0.05\n        right_knee_over_ankle = abs(right_knee.x - right_ankle.x) < 0.05\n        \n        if left_knee_over_ankle and right_knee_over_ankle:\n            return \"good\"\n        else:\n            return \"knees should be over ankles\"\n    \n    def _check_back_alignment(self, pose_landmarks):\n        \"\"\"Check back alignment for exercises like squats\"\"\"\n        # Get relevant landmarks\n        left_shoulder = pose_landmarks.landmark[mp.solutions.pose.PoseLandmark.LEFT_SHOULDER]\n        left_hip = pose_landmarks.landmark[mp.solutions.pose.PoseLandmark.LEFT_HIP]\n        left_knee = pose_landmarks.landmark[mp.solutions.pose.PoseLandmark.LEFT_KNEE]\n        \n        right_shoulder = pose_landmarks.landmark[mp.solutions.pose.PoseLandmark.RIGHT_SHOULDER]\n        right_hip = pose_landmarks.landmark[mp.solutions.pose.PoseLandmark.RIGHT_HIP]\n        right_knee = pose_landmarks.landmark[mp.solutions.pose.PoseLandmark.RIGHT_KNEE]\n        \n        # Check back angle - this is a simplified check\n        left_back_angle = self._calculate_angle(\n            (left_shoulder.x, left_shoulder.y),\n            (left_hip.x, left_hip.y),\n            (left_knee.x, left_knee.y)\n        )\n        \n        right_back_angle = self._calculate_angle(\n            (right_shoulder.x, right_shoulder.y),\n            (right_hip.x, right_hip.y),\n            (right_knee.x, right_knee.y)\n        )\n        \n        # Average angle should be near 180 degrees for straight back\n        avg_angle = (left_back_angle + right_back_angle) / 2\n        \n        if 160 <= avg_angle <= 200:  # Allow some margin\n            return \"good\"\n        else:\n            return \"keep back straight\"\n    \n    def _calculate_angle(self, a, b, c):\n        \"\"\"Calculate angle between three points\"\"\"\n        a = np.array(a)\n        b = np.array(b)\n        c = np.array(c)\n        \n        ba = a - b\n        bc = c - b\n        \n        cosine_angle = np.dot(ba, bc) / (np.linalg.norm(ba) * np.linalg.norm(bc))\n        angle = np.arccos(cosine_angle)\n        \n        # Convert to degrees\n        angle = np.degrees(angle)\n        \n        return angle","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-05T16:34:22.050170Z","iopub.execute_input":"2025-04-05T16:34:22.050395Z","iopub.status.idle":"2025-04-05T16:34:22.193715Z","shell.execute_reply.started":"2025-04-05T16:34:22.050377Z","shell.execute_reply":"2025-04-05T16:34:22.192859Z"}},"outputs":[],"execution_count":13},{"cell_type":"code","source":"if __name__ == \"__main__\":\n    # Check if TensorFlow is using GPU\n    if tf.config.list_physical_devices('GPU'):\n        print(\"GPU is available for TensorFlow!\")\n    else:\n        print(\"GPU is not available. Running with CPU.\")\n    \n    # Initialize model\n    model = PoseDetectionModel(num_classes=5)\n    \n    # Run complete demo\n    results = model.run_demo()\n    \n    print(f\"\\nFinal model accuracy: {results['accuracy']:.4f}\")\n    print(f\"Rehabilitation exercises classified: {', '.join(results['class_names'])}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-05T16:34:22.195058Z","iopub.execute_input":"2025-04-05T16:34:22.195358Z","iopub.status.idle":"2025-04-05T16:35:06.981294Z","shell.execute_reply.started":"2025-04-05T16:34:22.195327Z","shell.execute_reply":"2025-04-05T16:35:06.980580Z"}},"outputs":[{"name":"stdout","text":"GPU is available for TensorFlow!\nStarting Sports Rehabilitation Movement Analysis Demo...\nSimulating rehabilitation movement data with enhanced distinction between classes...\nGenerating 100 samples for 'knee_extension'\nGenerating 100 samples for 'shoulder_rotation'\nGenerating 100 samples for 'ankle_dorsiflexion'\nGenerating 100 samples for 'hip_abduction'\nGenerating 100 samples for 'wrist_flexion'\nData shape: (500, 30, 132), Labels shape: (500,)\nClass distribution: [100 100 100 100 100]\n\nTraining model...\nPerforming feature engineering...\nEnhanced feature shape: (400, 30, 284)\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/keras/src/layers/rnn/bidirectional.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n  super().__init__(**kwargs)\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"\u001b[1mModel: \"sequential_2\"\u001b[0m\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential_2\"</span>\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                        \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape               \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m        Param #\u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n│ bidirectional_6 (\u001b[38;5;33mBidirectional\u001b[0m)      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m30\u001b[0m, \u001b[38;5;34m128\u001b[0m)             │         \u001b[38;5;34m178,688\u001b[0m │\n├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n│ batch_normalization_10               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m30\u001b[0m, \u001b[38;5;34m128\u001b[0m)             │             \u001b[38;5;34m512\u001b[0m │\n│ (\u001b[38;5;33mBatchNormalization\u001b[0m)                 │                             │                 │\n├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n│ dropout_10 (\u001b[38;5;33mDropout\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m30\u001b[0m, \u001b[38;5;34m128\u001b[0m)             │               \u001b[38;5;34m0\u001b[0m │\n├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n│ bidirectional_7 (\u001b[38;5;33mBidirectional\u001b[0m)      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m30\u001b[0m, \u001b[38;5;34m256\u001b[0m)             │         \u001b[38;5;34m263,168\u001b[0m │\n├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n│ batch_normalization_11               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m30\u001b[0m, \u001b[38;5;34m256\u001b[0m)             │           \u001b[38;5;34m1,024\u001b[0m │\n│ (\u001b[38;5;33mBatchNormalization\u001b[0m)                 │                             │                 │\n├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n│ dropout_11 (\u001b[38;5;33mDropout\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m30\u001b[0m, \u001b[38;5;34m256\u001b[0m)             │               \u001b[38;5;34m0\u001b[0m │\n├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n│ bidirectional_8 (\u001b[38;5;33mBidirectional\u001b[0m)      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m128\u001b[0m)                 │         \u001b[38;5;34m164,352\u001b[0m │\n├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n│ batch_normalization_12               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m128\u001b[0m)                 │             \u001b[38;5;34m512\u001b[0m │\n│ (\u001b[38;5;33mBatchNormalization\u001b[0m)                 │                             │                 │\n├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n│ dropout_12 (\u001b[38;5;33mDropout\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m128\u001b[0m)                 │               \u001b[38;5;34m0\u001b[0m │\n├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n│ dense_6 (\u001b[38;5;33mDense\u001b[0m)                      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m128\u001b[0m)                 │          \u001b[38;5;34m16,512\u001b[0m │\n├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n│ batch_normalization_13               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m128\u001b[0m)                 │             \u001b[38;5;34m512\u001b[0m │\n│ (\u001b[38;5;33mBatchNormalization\u001b[0m)                 │                             │                 │\n├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n│ dropout_13 (\u001b[38;5;33mDropout\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m128\u001b[0m)                 │               \u001b[38;5;34m0\u001b[0m │\n├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n│ dense_7 (\u001b[38;5;33mDense\u001b[0m)                      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m64\u001b[0m)                  │           \u001b[38;5;34m8,256\u001b[0m │\n├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n│ batch_normalization_14               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m64\u001b[0m)                  │             \u001b[38;5;34m256\u001b[0m │\n│ (\u001b[38;5;33mBatchNormalization\u001b[0m)                 │                             │                 │\n├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n│ dropout_14 (\u001b[38;5;33mDropout\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m64\u001b[0m)                  │               \u001b[38;5;34m0\u001b[0m │\n├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n│ dense_8 (\u001b[38;5;33mDense\u001b[0m)                      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m5\u001b[0m)                   │             \u001b[38;5;34m325\u001b[0m │\n└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Layer (type)                         </span>┃<span style=\"font-weight: bold\"> Output Shape                </span>┃<span style=\"font-weight: bold\">         Param # </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n│ bidirectional_6 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Bidirectional</span>)      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">30</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)             │         <span style=\"color: #00af00; text-decoration-color: #00af00\">178,688</span> │\n├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n│ batch_normalization_10               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">30</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)             │             <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span> │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)                 │                             │                 │\n├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n│ dropout_10 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">30</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)             │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n│ bidirectional_7 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Bidirectional</span>)      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">30</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)             │         <span style=\"color: #00af00; text-decoration-color: #00af00\">263,168</span> │\n├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n│ batch_normalization_11               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">30</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)             │           <span style=\"color: #00af00; text-decoration-color: #00af00\">1,024</span> │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)                 │                             │                 │\n├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n│ dropout_11 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">30</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)             │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n│ bidirectional_8 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Bidirectional</span>)      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)                 │         <span style=\"color: #00af00; text-decoration-color: #00af00\">164,352</span> │\n├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n│ batch_normalization_12               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)                 │             <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span> │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)                 │                             │                 │\n├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n│ dropout_12 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)                 │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n│ dense_6 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)                 │          <span style=\"color: #00af00; text-decoration-color: #00af00\">16,512</span> │\n├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n│ batch_normalization_13               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)                 │             <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span> │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)                 │                             │                 │\n├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n│ dropout_13 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)                 │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n│ dense_7 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)                  │           <span style=\"color: #00af00; text-decoration-color: #00af00\">8,256</span> │\n├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n│ batch_normalization_14               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)                  │             <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span> │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)                 │                             │                 │\n├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n│ dropout_14 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)                  │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n│ dense_8 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">5</span>)                   │             <span style=\"color: #00af00; text-decoration-color: #00af00\">325</span> │\n└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Total params: \u001b[0m\u001b[38;5;34m634,117\u001b[0m (2.42 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">634,117</span> (2.42 MB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m632,709\u001b[0m (2.41 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">632,709</span> (2.41 MB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m1,408\u001b[0m (5.50 KB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">1,408</span> (5.50 KB)\n</pre>\n"},"metadata":{}},{"name":"stdout","text":"Epoch 1/50\n\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 149ms/step - accuracy: 0.4510 - loss: 1.4882 - val_accuracy: 1.0000 - val_loss: 1.3205 - learning_rate: 0.0010\nEpoch 2/50\n\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 62ms/step - accuracy: 0.9224 - loss: 0.3395 - val_accuracy: 1.0000 - val_loss: 0.9975 - learning_rate: 0.0010\nEpoch 3/50\n\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 60ms/step - accuracy: 0.9686 - loss: 0.1549 - val_accuracy: 1.0000 - val_loss: 0.7047 - learning_rate: 0.0010\nEpoch 4/50\n\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 58ms/step - accuracy: 0.9927 - loss: 0.0760 - val_accuracy: 1.0000 - val_loss: 0.4867 - learning_rate: 0.0010\nEpoch 5/50\n\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 59ms/step - accuracy: 0.9942 - loss: 0.0473 - val_accuracy: 1.0000 - val_loss: 0.3454 - learning_rate: 0.0010\nEpoch 6/50\n\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 59ms/step - accuracy: 1.0000 - loss: 0.0338 - val_accuracy: 1.0000 - val_loss: 0.2493 - learning_rate: 0.0010\nEpoch 7/50\n\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 60ms/step - accuracy: 1.0000 - loss: 0.0220 - val_accuracy: 1.0000 - val_loss: 0.1791 - learning_rate: 0.0010\nEpoch 8/50\n\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 60ms/step - accuracy: 1.0000 - loss: 0.0240 - val_accuracy: 1.0000 - val_loss: 0.1271 - learning_rate: 0.0010\nEpoch 9/50\n\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 59ms/step - accuracy: 0.9988 - loss: 0.0211 - val_accuracy: 1.0000 - val_loss: 0.0895 - learning_rate: 0.0010\nEpoch 10/50\n\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 59ms/step - accuracy: 0.9973 - loss: 0.0214 - val_accuracy: 1.0000 - val_loss: 0.0621 - learning_rate: 0.0010\nEpoch 11/50\n\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 60ms/step - accuracy: 1.0000 - loss: 0.0148 - val_accuracy: 1.0000 - val_loss: 0.0434 - learning_rate: 0.0010\nEpoch 12/50\n\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 60ms/step - accuracy: 1.0000 - loss: 0.0133 - val_accuracy: 1.0000 - val_loss: 0.0307 - learning_rate: 0.0010\nEpoch 13/50\n\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 57ms/step - accuracy: 1.0000 - loss: 0.0161 - val_accuracy: 1.0000 - val_loss: 0.0217 - learning_rate: 0.0010\nEpoch 14/50\n\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 60ms/step - accuracy: 1.0000 - loss: 0.0147 - val_accuracy: 1.0000 - val_loss: 0.0154 - learning_rate: 0.0010\nEpoch 15/50\n\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 62ms/step - accuracy: 1.0000 - loss: 0.0127 - val_accuracy: 1.0000 - val_loss: 0.0110 - learning_rate: 0.0010\nEpoch 16/50\n\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 61ms/step - accuracy: 1.0000 - loss: 0.0176 - val_accuracy: 1.0000 - val_loss: 0.0079 - learning_rate: 0.0010\nEpoch 17/50\n\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 59ms/step - accuracy: 1.0000 - loss: 0.0124 - val_accuracy: 1.0000 - val_loss: 0.0058 - learning_rate: 0.0010\nEpoch 18/50\n\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 61ms/step - accuracy: 1.0000 - loss: 0.0095 - val_accuracy: 1.0000 - val_loss: 0.0043 - learning_rate: 0.0010\nEpoch 19/50\n\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 58ms/step - accuracy: 1.0000 - loss: 0.0091 - val_accuracy: 1.0000 - val_loss: 0.0032 - learning_rate: 0.0010\nEpoch 20/50\n\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 57ms/step - accuracy: 1.0000 - loss: 0.0110 - val_accuracy: 1.0000 - val_loss: 0.0024 - learning_rate: 0.0010\nEpoch 21/50\n\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 60ms/step - accuracy: 1.0000 - loss: 0.0071 - val_accuracy: 1.0000 - val_loss: 0.0018 - learning_rate: 0.0010\nEpoch 22/50\n\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 59ms/step - accuracy: 1.0000 - loss: 0.0073 - val_accuracy: 1.0000 - val_loss: 0.0014 - learning_rate: 0.0010\nEpoch 23/50\n\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 58ms/step - accuracy: 1.0000 - loss: 0.0045 - val_accuracy: 1.0000 - val_loss: 0.0011 - learning_rate: 0.0010\nEpoch 24/50\n\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 60ms/step - accuracy: 1.0000 - loss: 0.0046 - val_accuracy: 1.0000 - val_loss: 9.1973e-04 - learning_rate: 0.0010\nEpoch 25/50\n\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 58ms/step - accuracy: 1.0000 - loss: 0.0099 - val_accuracy: 1.0000 - val_loss: 7.2922e-04 - learning_rate: 0.0010\nEpoch 26/50\n\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 59ms/step - accuracy: 1.0000 - loss: 0.0055 - val_accuracy: 1.0000 - val_loss: 5.9310e-04 - learning_rate: 0.0010\nEpoch 27/50\n\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 59ms/step - accuracy: 1.0000 - loss: 0.0071 - val_accuracy: 1.0000 - val_loss: 4.8861e-04 - learning_rate: 0.0010\nEpoch 28/50\n\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 60ms/step - accuracy: 1.0000 - loss: 0.0048 - val_accuracy: 1.0000 - val_loss: 4.0299e-04 - learning_rate: 0.0010\nEpoch 29/50\n\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 58ms/step - accuracy: 1.0000 - loss: 0.0051 - val_accuracy: 1.0000 - val_loss: 3.4840e-04 - learning_rate: 0.0010\nEpoch 30/50\n\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 59ms/step - accuracy: 1.0000 - loss: 0.0057 - val_accuracy: 1.0000 - val_loss: 3.0562e-04 - learning_rate: 0.0010\nEpoch 31/50\n\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 59ms/step - accuracy: 1.0000 - loss: 0.0042 - val_accuracy: 1.0000 - val_loss: 2.6980e-04 - learning_rate: 0.0010\nEpoch 32/50\n\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 60ms/step - accuracy: 1.0000 - loss: 0.0074 - val_accuracy: 1.0000 - val_loss: 2.3571e-04 - learning_rate: 0.0010\nEpoch 33/50\n\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 62ms/step - accuracy: 1.0000 - loss: 0.0048 - val_accuracy: 1.0000 - val_loss: 2.1103e-04 - learning_rate: 0.0010\nEpoch 34/50\n\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 59ms/step - accuracy: 1.0000 - loss: 0.0046 - val_accuracy: 1.0000 - val_loss: 1.8885e-04 - learning_rate: 0.0010\nEpoch 35/50\n\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 59ms/step - accuracy: 1.0000 - loss: 0.0037 - val_accuracy: 1.0000 - val_loss: 1.6963e-04 - learning_rate: 0.0010\nEpoch 36/50\n\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 60ms/step - accuracy: 1.0000 - loss: 0.0035 - val_accuracy: 1.0000 - val_loss: 1.5484e-04 - learning_rate: 0.0010\nEpoch 37/50\n\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 19ms/step - accuracy: 1.0000 - loss: 0.0036\nEpoch 37: ReduceLROnPlateau reducing learning rate to 0.00020000000949949026.\n\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 60ms/step - accuracy: 1.0000 - loss: 0.0036 - val_accuracy: 1.0000 - val_loss: 1.4186e-04 - learning_rate: 0.0010\nEpoch 38/50\n\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 57ms/step - accuracy: 1.0000 - loss: 0.0048 - val_accuracy: 1.0000 - val_loss: 1.3989e-04 - learning_rate: 2.0000e-04\nEpoch 39/50\n\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 59ms/step - accuracy: 1.0000 - loss: 0.0035 - val_accuracy: 1.0000 - val_loss: 1.3782e-04 - learning_rate: 2.0000e-04\nEpoch 40/50\n\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 57ms/step - accuracy: 1.0000 - loss: 0.0033 - val_accuracy: 1.0000 - val_loss: 1.3642e-04 - learning_rate: 2.0000e-04\nEpoch 41/50\n\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 59ms/step - accuracy: 1.0000 - loss: 0.0033 - val_accuracy: 1.0000 - val_loss: 1.3426e-04 - learning_rate: 2.0000e-04\nEpoch 42/50\n\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 59ms/step - accuracy: 1.0000 - loss: 0.0031 - val_accuracy: 1.0000 - val_loss: 1.3070e-04 - learning_rate: 2.0000e-04\nEpoch 43/50\n\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 60ms/step - accuracy: 1.0000 - loss: 0.0037 - val_accuracy: 1.0000 - val_loss: 1.2925e-04 - learning_rate: 2.0000e-04\nEpoch 44/50\n\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 58ms/step - accuracy: 1.0000 - loss: 0.0050 - val_accuracy: 1.0000 - val_loss: 1.2797e-04 - learning_rate: 2.0000e-04\nEpoch 45/50\n\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 58ms/step - accuracy: 1.0000 - loss: 0.0039 - val_accuracy: 1.0000 - val_loss: 1.2573e-04 - learning_rate: 2.0000e-04\nEpoch 46/50\n\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 19ms/step - accuracy: 1.0000 - loss: 0.0044\nEpoch 46: ReduceLROnPlateau reducing learning rate to 4.0000001899898055e-05.\n\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 62ms/step - accuracy: 1.0000 - loss: 0.0043 - val_accuracy: 1.0000 - val_loss: 1.2506e-04 - learning_rate: 2.0000e-04\nEpoch 47/50\n\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 58ms/step - accuracy: 1.0000 - loss: 0.0045 - val_accuracy: 1.0000 - val_loss: 1.2499e-04 - learning_rate: 4.0000e-05\nEpoch 48/50\n\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 58ms/step - accuracy: 1.0000 - loss: 0.0028 - val_accuracy: 1.0000 - val_loss: 1.2647e-04 - learning_rate: 4.0000e-05\nEpoch 49/50\n\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 59ms/step - accuracy: 1.0000 - loss: 0.0039 - val_accuracy: 1.0000 - val_loss: 1.2735e-04 - learning_rate: 4.0000e-05\nEpoch 50/50\n\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 63ms/step - accuracy: 1.0000 - loss: 0.0035 - val_accuracy: 1.0000 - val_loss: 1.2736e-04 - learning_rate: 4.0000e-05\nRestoring model weights from the end of the best epoch: 47.\n\nEvaluating model...\nPerforming feature engineering...\nEnhanced feature shape: (100, 30, 284)\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - accuracy: 1.0000 - loss: 1.1674e-04 \nTest Loss: 0.0001\nTest Accuracy: 1.0000\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 175ms/step\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x800 with 2 Axes>","image/png":"\n"},"metadata":{}},{"name":"stdout","text":"\nClassification Report:\n                    precision    recall  f1-score   support\n\n    knee_extension       1.00      1.00      1.00        20\n shoulder_rotation       1.00      1.00      1.00        20\nankle_dorsiflexion       1.00      1.00      1.00        20\n     hip_abduction       1.00      1.00      1.00        20\n     wrist_flexion       1.00      1.00      1.00        20\n\n          accuracy                           1.00       100\n         macro avg       1.00      1.00      1.00       100\n      weighted avg       1.00      1.00      1.00       100\n\nTraining history not available\n\nSaving model...\nModel saved to rehabilitation_model.keras\nScaler saved to rehabilitation_model_scaler.pkl\n\nDemonstrating movement analysis...\nAnalyzing test sample (true class: hip_abduction)\nPerforming feature engineering...\nEnhanced feature shape: (1, 30, 284)\n\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 20ms/step\nDetected exercise: shoulder_rotation (Confidence: 0.42)\n\nMovement Analysis Feedback:\n- Movement smoothness: 0.29/1.00\n- Movement appears jerky. Focus on smoother, more controlled execution.\n- Shoulder rotation range: 169.4 degrees\n- Shoulder rotation is a bit fast. Try slowing down for better control.\n- Exercise is performed rather quickly. Consider slowing down for better muscular engagement and control.\n\nVisualizing movement sequence...\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x500 with 1 Axes>","image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 2000x2000 with 1 Axes>","image/png":"\n"},"metadata":{}},{"name":"stdout","text":"\nDemo completed successfully!\nPerforming feature engineering...\nEnhanced feature shape: (100, 30, 284)\n\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - accuracy: 1.0000 - loss: 1.1674e-04 \n\nFinal model accuracy: 1.0000\nRehabilitation exercises classified: knee_extension, shoulder_rotation, ankle_dorsiflexion, hip_abduction, wrist_flexion\n","output_type":"stream"}],"execution_count":14},{"cell_type":"code","source":"# Initialize the model\npose_model = PoseDetectionModel()\npose_model.model = keras.models.load_model('/kaggle/working/rehabilitation_model.keras')\n\n# Load an image for posture correction analysis\nimage_path = \"/kaggle/input/yoga-poses-dataset/DATASET/TRAIN/downdog/00000128.jpg\"  # Replace with your image path\n\n# Specify the exercise type for targeted feedback\nexercise_type = \"knee_extension\"  # Options: knee_extension, shoulder_rotation, ankle_dorsiflexion, hip_abduction, wrist_flexion\n\n# Run the posture correction visualization\ncorrected_image = model.visualize_posture_correction(image_path, exercise_type)\n\nprint(f\"Posture correction visualization complete for {exercise_type}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-05T16:35:06.982169Z","iopub.execute_input":"2025-04-05T16:35:06.982410Z","iopub.status.idle":"2025-04-05T16:35:07.939377Z","shell.execute_reply.started":"2025-04-05T16:35:06.982391Z","shell.execute_reply":"2025-04-05T16:35:07.938609Z"}},"outputs":[{"name":"stdout","text":"Error in posture correction visualization: Exception encountered when calling Sequential.call().\n\n\u001b[1mCannot take the length of shape with unknown rank.\u001b[0m\n\nArguments received by Sequential.call():\n  • inputs=tf.Tensor(shape=<unknown>, dtype=float32)\n  • training=False\n  • mask=None\nPosture correction visualization complete for knee_extension\n","output_type":"stream"},{"name":"stderr","text":"Traceback (most recent call last):\n  File \"<ipython-input-13-6a11daf68b31>\", line 1664, in visualize_posture_correction\n    prediction = self.model.predict(landmarks_scaled)\n  File \"/usr/local/lib/python3.10/dist-packages/keras/src/utils/traceback_utils.py\", line 122, in error_handler\n    raise e.with_traceback(filtered_tb) from None\n  File \"/usr/local/lib/python3.10/dist-packages/keras/src/utils/traceback_utils.py\", line 122, in error_handler\n    raise e.with_traceback(filtered_tb) from None\nValueError: Exception encountered when calling Sequential.call().\n\n\u001b[1mCannot take the length of shape with unknown rank.\u001b[0m\n\nArguments received by Sequential.call():\n  • inputs=tf.Tensor(shape=<unknown>, dtype=float32)\n  • training=False\n  • mask=None\n","output_type":"stream"}],"execution_count":15}]}